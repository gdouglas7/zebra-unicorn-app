version: '3.8'

services:
  
  vote:
    image: gdouglas7/zebra-unicorn-app_vote:0.0.1
    ports:
      - "8080:8080"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - zebra-unicorn-network
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure

  result:
    image: gdouglas7/zebra-unicorn-app_result:0.0.1
    ports:
      - "8081:8080"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - zebra-unicorn-network
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  worker:
    image: gdouglas7/zebra-unicorn-app_worker:0.0.1
    ports:
      - "8082:8080"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - zebra-unicorn-network
    deploy:
      mode: replicated
      replicas: 1
      labels: [APP=VOTING]
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      placement:
        constraints: [node.role == manager]
  
  redis:
    image: redis:3.2
    volumes:
      - type: volume
        source: redis-data
        target: /data
    networks:
      - zebra-unicorn-network
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  postgres:
    image: postgres:9.4
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - type: volume
        source: db-data
        target: /var/lib/postgresql/data
    networks:
      - zebra-unicorn-network
    deploy:
      placement:
        constraints: [node.role == manager]

  visualizer:
    image: dockersamples/visualizer
    ports:
      - "8083:8080"
    stop_grace_period: 1m30s
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
    deploy:
      placement:
        constraints: [node.role == manager]
    
volumes:
  redis-data:
    name: zebra-unicorn-redis-data
  db-data:
    name: zebra-unicorn-db-data

networks:
  zebra-unicorn-network:
    name: zebra-unicorn-network